
(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
PROGRAM PRG_SENSORES
VAR
	J: USINT; (* VAR USADA PARA LOOPS - 1 NIVEL*)
	K: USINT; (* VAR USADA PARA LOOPS - 2 NIVEL*)
	ERRO: BOOL; (* VAR USADA PARA RETORNAR PE큐-ERRADA ao programa principal*)
	ACHOU: BOOL; (* VAR USADA PARA INDICAR QUE UMA PE큐 FOI PEGA - TRUE->certa | FALSE->errada*)
END_VAR
(* @END_DECLARATION := '0' *)
RETURN;
END_PROGRAM
ACTION	ATIVAR:
(* LIGA A SAIDA DO SENSOR Z(indice do ativo)*)
IF ARRAY_DE_ATIVOS[Z] <> 0 THEN
	ARRAY_SENSORES_OUT[ARRAY_DE_ATIVOS[Z]] := TRUE;
END_IF
UPDATE_OUT();
RETURN;
END_ACTION

ACTION	DESATIVAR_TODOS:
(*DESLIGA TODOS SENSORES E SEU ESTADO ANTERIOR - para evitar bug*)
FOR J:=1 TO NUM_SENSORES BY 1 DO
	ARRAY_SENSORES_OUT[J] := FALSE;
	ARRAY_SENSORES_OLDSTATE[J] := FALSE;
END_FOR
UPDATE_OUT();
RETURN;
END_ACTION

ACTION	READ_TODOS:
(* LE SE O MONTADOR PEGOU ALGUMA PE큐 - e retorna erro no caso de pe網 errada*)
UPDATE_IN(); (*primeiro atualiza os estados dos sensores*)
ERRO := FALSE;

(*LA큞 PARA LEITURA DOS SENSORES*)
FOR J:=1 TO NUM_SENSORES BY 1 DO
	(*SCANEA PARA SE ALGUM SENSOR ALTEROU SEUS ESTADO PARA ATUADO*)
	IF ARRAY_SENSORES_IN[J] = TRUE THEN
		ARRAY_SENSORES_OLDSTATE[J] := TRUE;
		TON_SENSORES[J](IN:=FALSE, PT:=T#0s);
	END_IF
	(*CONFERE SE VOLTOU PARA ESTADO NAO-ATUADO*)
	IF ARRAY_SENSORES_IN[J] = FALSE AND ARRAY_SENSORES_OLDSTATE[J] = TRUE THEN
		TON_SENSORES[J](IN:=TRUE, PT:=TEMPO_RESP_SENSORES);
		IF TON_SENSORES[J].Q = TRUE THEN
			ARRAY_SENSORES_OLDSTATE[J] := FALSE;
			TON_SENSORES[J](IN:=FALSE, PT:=T#0s);
			(*CONFERE SE EH PE큐 CERTA*)
			ACHOU := FALSE;
			FOR K:=1 TO NUM_ATIVOS-1 BY 1 DO
				IF ARRAY_DE_ATIVOS[K] <> 0 THEN
					IF J = ARRAY_DE_ATIVOS[K] THEN
						BATENTE := TRUE;
						ACHOU:=TRUE;
						EXIT;
					END_IF
				END_IF
			END_FOR
			(*SE FOR DESCONTA DOS ATIVOS E DESLIGA*)
			IF ACHOU = TRUE THEN
				IF TEM_PARAFUSA = FALSE THEN
					ARRAY_SENSORES_OUT[J] := FALSE;
					ARRAY_DE_ATIVOS[K] := 0;
				END_IF
			ELSE (*senao retorna erro*)
				ERRO:=TRUE;
				EXIT;
			END_IF
		END_IF
	END_IF

END_FOR


UPDATE_OUT();
RETURN;

END_ACTION

ACTION	UPDATE_IN:
(*ATUALIZA TODAS ENTRADAS - joga o estado no vetor l窕ico de entradas para ser manuseado*)
ARRAY_SENSORES_IN[1] := ENTRADA1;
ARRAY_SENSORES_IN[2] := ENTRADA2;
ARRAY_SENSORES_IN[3] := ENTRADA3;
ARRAY_SENSORES_IN[4] := ENTRADA4;
ARRAY_SENSORES_IN[5] := ENTRADA5;
ARRAY_SENSORES_IN[6] := ENTRADA6;
ARRAY_SENSORES_IN[7] := ENTRADA7;
ARRAY_SENSORES_IN[8] := ENTRADA8;
ARRAY_SENSORES_IN[9] := ENTRADA9;
ARRAY_SENSORES_IN[10] := ENTRADA10;
ARRAY_SENSORES_IN[11] := ENTRADA11;
ARRAY_SENSORES_IN[12] := ENTRADA12;
ARRAY_SENSORES_IN[13] := ENTRADA13;
ARRAY_SENSORES_IN[14] := ENTRADA14;
RETURN;
END_ACTION

ACTION	UPDATE_OUT:
(*ATUALIZA TODOS AS SAIDAS CONFORME O NUMERO DE SENSORES*)
IF NUM_SENSORES > 0 THEN
SAIDA1 := ARRAY_SENSORES_OUT[1];
END_IF
IF NUM_SENSORES > 1 THEN
SAIDA2 := ARRAY_SENSORES_OUT[2];
END_IF
IF NUM_SENSORES > 2 THEN
SAIDA3 := ARRAY_SENSORES_OUT[3];
END_IF
IF NUM_SENSORES > 3 THEN
SAIDA4 := ARRAY_SENSORES_OUT[4];
END_IF
IF NUM_SENSORES > 4 THEN
SAIDA5 := ARRAY_SENSORES_OUT[5];
END_IF
IF NUM_SENSORES > 5 THEN
SAIDA6 := ARRAY_SENSORES_OUT[6];
END_IF
IF NUM_SENSORES > 6 THEN
SAIDA7 := ARRAY_SENSORES_OUT[7];
END_IF
IF NUM_SENSORES > 7 THEN
SAIDA8 := ARRAY_SENSORES_OUT[8];
END_IF
IF NUM_SENSORES > 8 THEN
SAIDA9 := ARRAY_SENSORES_OUT[9];
END_IF
IF NUM_SENSORES > 9 THEN
SAIDA10 := ARRAY_SENSORES_OUT[10];
END_IF
IF NUM_SENSORES > 10 THEN
SAIDA11 := ARRAY_SENSORES_OUT[11];
END_IF
IF NUM_SENSORES > 11 THEN
SAIDA12 := ARRAY_SENSORES_OUT[12];
END_IF
IF NUM_SENSORES > 12 THEN
SAIDA13 := ARRAY_SENSORES_OUT[13];
END_IF
IF NUM_SENSORES > 13 THEN
SAIDA14 := ARRAY_SENSORES_OUT[14];
END_IF

RETURN;











END_ACTION

